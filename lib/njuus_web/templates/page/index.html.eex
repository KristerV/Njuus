<script src="https://unpkg.com/popper.js@1"></script>
<script src="https://unpkg.com/tippy.js@4"></script>

<%= for post <- @posts do %>

  <template id="template-provider-<%= post.id %>">
    <p>Allikas: <%= post.provider %></p>
    <button class="error" onclick="addFilter(this, 'provider', '<%= post.provider %>')">Peida <%= post.provider %></button>
  </template>
  <template id="template-category-<%= post.id %>">
    <p>Kategooria: <%= post.category %></p>
    <button class="error" onclick="addFilter(this, 'category', '<%= post.category %>')">Peida <%= post.category %></button>
  </template>

  <p class="post">

    <span class="stack-icon <%= get_voting_class(@conn, post) %>" onclick="handleVote(this, '<%= post.id %>')" title="Kasutajate hääled.">
      <img class="icon" src="icons/arrow-up.svg"/>
      <sub><%= length(post.votes) %></sub>
    </span>

    <img class="icon" src="<%= post.icon %>" data-template="template-provider-<%= post.id %>"/>

    <img class="icon" src="<%= @icons[post.category] %>" data-template="template-category-<%= post.id %>"/>

    <span class="title">
      <a
        target="_blank"
        href="<%= if post.link, do: post.link, else: Routes.post_path(@conn, :show, post) %>"
        title="<%= post.category %> (<%= post.categories %>) - <%= post.datetime %>">
        <%= post.title %>
      </a>
    </span>

  </p>
<% end %>


<script>

  const headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }

  async function handleVote(el, postid) {
    const isVoted = !el.classList.contains('icon-transparent')
    const body = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({postid})
    }

    let url = '/api/vote_add'
    if (isVoted) {
      url = '/api/vote_rem'
    }
    const resp = await fetch(url, body)
    if (resp.status !== 200) return

    el.classList.toggle('icon-transparent')

    const newVotes = Number(await resp.text())
    el.querySelector('sub').innerHTML = newVotes
  }

  tippy('.post > .icon', {
    interactive: true,
    content(el) {
      const id = el.getAttribute('data-template')
      const container = document.createElement('div')
      const linkedTemplate = document.getElementById(id)
      const node = document.importNode(linkedTemplate.content, true)
      container.appendChild(node)
      return container
    },
    arrow: true,
    hideOnClick: false
  })

  async function addFilter(el, type, name) {
    const resp = await fetch('/api/add_user_filter', {
      method: 'POST',
      headers,
      body: JSON.stringify({ type, name })
    })

    if (resp.status !== 200) return

    const parent = el.parentElement
    parent.removeChild(el)
    parent.innerHTML += "<p>Peidetud (kajastub järgmine refresh)</p>"
  }

  async function updateFilter(filter) {
    await fetch('/api/update_user_settings', {
      method: 'POST',
      headers,
      body: JSON.stringify(filter)
    })

  }
</script>

<h2 class="secondary-title">Viimase
<select id="hours-select" onchange="addPeriod(this)">
  <option value="24">24h</option>
  <option value="168">nädala</option>
  <option value="720">kuu</option>
</select>
 TOP 10 Eesti uudist</h2>

 <script>

    // React to select change
    function addPeriod(el) {
      location = '/?p=' + el.options[el.selectedIndex].value
    }

    // Set default selected hours
    document.querySelectorAll('#hours-select option').forEach(function(item){
      if (item.value == <%= @hours_selected %>) {
        item.selected = true
      }
    })
 </script>

<%= for post <- @top_posts do %>
  <%= render NjuusWeb.PageView, "post.html", [conn: @conn, post: post, icons: @icons] %>
<% end %>

<h2>Värsked uudised üle Eesti</h2>

<%= for post <- @posts do %>
  <%= render NjuusWeb.PageView, "post.html", [conn: @conn, post: post, icons: @icons] %>
<% end %>

<script src="https://unpkg.com/popper.js@1"></script>
<script src="https://unpkg.com/tippy.js@4"></script>
<script>

  const headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }

  async function handleVote(el, postid) {
    const isVoted = !el.classList.contains('icon-transparent')
    const body = {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({postid})
    }

    let url = '/api/vote_add'
    if (isVoted) {
      url = '/api/vote_rem'
    }
    const resp = await fetch(url, body)
    if (resp.status !== 200) return

    el.classList.toggle('icon-transparent')

    const newVotes = Number(await resp.text())
    el.querySelector('sub').innerHTML = newVotes
  }

  tippy('.post > .icon', {
    interactive: true,
    content(el) {
      const id = el.getAttribute('data-template')
      const container = document.createElement('div')
      const linkedTemplate = document.getElementById(id)
      const node = document.importNode(linkedTemplate.content, true)
      container.appendChild(node)
      return container
    },
    arrow: true,
    hideOnClick: false
  })

  async function addFilter(el, type, name) {
    const resp = await fetch('/api/add_user_filter', {
      method: 'POST',
      headers,
      body: JSON.stringify({ type, name })
    })

    if (resp.status !== 200) return

    const parent = el.parentElement
    parent.removeChild(el)
    parent.innerHTML += "<p>Peidetud (kajastub järgmine refresh)</p>"
  }

  async function updateFilter(filter) {
    await fetch('/api/update_user_settings', {
      method: 'POST',
      headers,
      body: JSON.stringify(filter)
    })

  }

  // Help people understand how voting works

    tippy('.post', {
      trigger: 'click',
      interactive: true,
      content(el) {
        return "<h4 style='padding: 0.5rem 1rem;'>Anna artiklile hääl, klikkides noolele!</h4>"
      },
      arrow: false,
      placement: "top-start"
    })
</script>